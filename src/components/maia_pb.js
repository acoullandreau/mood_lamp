// source: maia.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.maia.Color', null, global);
goog.exportSymbol('proto.maia.GetMode', null, global);
goog.exportSymbol('proto.maia.Message', null, global);
goog.exportSymbol('proto.maia.Mode', null, global);
goog.exportSymbol('proto.maia.Readings', null, global);
goog.exportSymbol('proto.maia.SetActiveMode', null, global);
goog.exportSymbol('proto.maia.Settings', null, global);
goog.exportSymbol('proto.maia.Time', null, global);
goog.exportSymbol('proto.maia.UpdateModeColor', null, global);
goog.exportSymbol('proto.maia.UpdateModeSpeed', null, global);
goog.exportSymbol('proto.maia.auto_mode_t', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.maia.Message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.maia.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.maia.Message.displayName = 'proto.maia.Message';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.maia.Color = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.maia.Color, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.maia.Color.displayName = 'proto.maia.Color';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.maia.SetActiveMode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.maia.SetActiveMode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.maia.SetActiveMode.displayName = 'proto.maia.SetActiveMode';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.maia.GetMode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.maia.GetMode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.maia.GetMode.displayName = 'proto.maia.GetMode';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.maia.UpdateModeColor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.maia.UpdateModeColor.repeatedFields_, null);
};
goog.inherits(proto.maia.UpdateModeColor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.maia.UpdateModeColor.displayName = 'proto.maia.UpdateModeColor';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.maia.UpdateModeSpeed = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.maia.UpdateModeSpeed, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.maia.UpdateModeSpeed.displayName = 'proto.maia.UpdateModeSpeed';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.maia.Mode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.maia.Mode.repeatedFields_, null);
};
goog.inherits(proto.maia.Mode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.maia.Mode.displayName = 'proto.maia.Mode';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.maia.Readings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.maia.Readings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.maia.Readings.displayName = 'proto.maia.Readings';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.maia.Time = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.maia.Time, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.maia.Time.displayName = 'proto.maia.Time';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.maia.Settings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.maia.Settings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.maia.Settings.displayName = 'proto.maia.Settings';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.maia.Message.prototype.toObject = function(opt_includeInstance) {
  return proto.maia.Message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.maia.Message} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.maia.Message.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    command: jspb.Message.getFieldWithDefault(msg, 2, 0),
    payload: msg.getPayload_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.maia.Message}
 */
proto.maia.Message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.maia.Message;
  return proto.maia.Message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.maia.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.maia.Message}
 */
proto.maia.Message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCommand(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.maia.Message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.maia.Message.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.maia.Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.maia.Message.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCommand();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.maia.Message.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.maia.Message} returns this
 */
proto.maia.Message.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 command = 2;
 * @return {number}
 */
proto.maia.Message.prototype.getCommand = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.maia.Message} returns this
 */
proto.maia.Message.prototype.setCommand = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes payload = 3;
 * @return {!(string|Uint8Array)}
 */
proto.maia.Message.prototype.getPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes payload = 3;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.maia.Message.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * optional bytes payload = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.maia.Message.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.maia.Message} returns this
 */
proto.maia.Message.prototype.setPayload = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.maia.Color.prototype.toObject = function(opt_includeInstance) {
  return proto.maia.Color.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.maia.Color} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.maia.Color.toObject = function(includeInstance, msg) {
  var f, obj = {
    rgb: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.maia.Color}
 */
proto.maia.Color.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.maia.Color;
  return proto.maia.Color.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.maia.Color} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.maia.Color}
 */
proto.maia.Color.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRgb(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.maia.Color.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.maia.Color.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.maia.Color} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.maia.Color.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRgb();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 rgb = 1;
 * @return {number}
 */
proto.maia.Color.prototype.getRgb = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.maia.Color} returns this
 */
proto.maia.Color.prototype.setRgb = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.maia.SetActiveMode.prototype.toObject = function(opt_includeInstance) {
  return proto.maia.SetActiveMode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.maia.SetActiveMode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.maia.SetActiveMode.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.maia.SetActiveMode}
 */
proto.maia.SetActiveMode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.maia.SetActiveMode;
  return proto.maia.SetActiveMode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.maia.SetActiveMode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.maia.SetActiveMode}
 */
proto.maia.SetActiveMode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.maia.SetActiveMode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.maia.SetActiveMode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.maia.SetActiveMode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.maia.SetActiveMode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.maia.SetActiveMode.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.maia.SetActiveMode} returns this
 */
proto.maia.SetActiveMode.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.maia.GetMode.prototype.toObject = function(opt_includeInstance) {
  return proto.maia.GetMode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.maia.GetMode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.maia.GetMode.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.maia.GetMode}
 */
proto.maia.GetMode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.maia.GetMode;
  return proto.maia.GetMode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.maia.GetMode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.maia.GetMode}
 */
proto.maia.GetMode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.maia.GetMode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.maia.GetMode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.maia.GetMode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.maia.GetMode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.maia.GetMode.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.maia.GetMode} returns this
 */
proto.maia.GetMode.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.maia.UpdateModeColor.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.maia.UpdateModeColor.prototype.toObject = function(opt_includeInstance) {
  return proto.maia.UpdateModeColor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.maia.UpdateModeColor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.maia.UpdateModeColor.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    newColor: (f = msg.getNewColor()) && proto.maia.Color.toObject(includeInstance, f),
    colorListList: jspb.Message.toObjectList(msg.getColorListList(),
    proto.maia.Color.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.maia.UpdateModeColor}
 */
proto.maia.UpdateModeColor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.maia.UpdateModeColor;
  return proto.maia.UpdateModeColor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.maia.UpdateModeColor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.maia.UpdateModeColor}
 */
proto.maia.UpdateModeColor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.maia.Color;
      reader.readMessage(value,proto.maia.Color.deserializeBinaryFromReader);
      msg.setNewColor(value);
      break;
    case 3:
      var value = new proto.maia.Color;
      reader.readMessage(value,proto.maia.Color.deserializeBinaryFromReader);
      msg.addColorList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.maia.UpdateModeColor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.maia.UpdateModeColor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.maia.UpdateModeColor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.maia.UpdateModeColor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getNewColor();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.maia.Color.serializeBinaryToWriter
    );
  }
  f = message.getColorListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.maia.Color.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.maia.UpdateModeColor.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.maia.UpdateModeColor} returns this
 */
proto.maia.UpdateModeColor.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Color new_color = 2;
 * @return {?proto.maia.Color}
 */
proto.maia.UpdateModeColor.prototype.getNewColor = function() {
  return /** @type{?proto.maia.Color} */ (
    jspb.Message.getWrapperField(this, proto.maia.Color, 2));
};


/**
 * @param {?proto.maia.Color|undefined} value
 * @return {!proto.maia.UpdateModeColor} returns this
*/
proto.maia.UpdateModeColor.prototype.setNewColor = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.maia.UpdateModeColor} returns this
 */
proto.maia.UpdateModeColor.prototype.clearNewColor = function() {
  return this.setNewColor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.maia.UpdateModeColor.prototype.hasNewColor = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Color color_list = 3;
 * @return {!Array<!proto.maia.Color>}
 */
proto.maia.UpdateModeColor.prototype.getColorListList = function() {
  return /** @type{!Array<!proto.maia.Color>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.maia.Color, 3));
};


/**
 * @param {!Array<!proto.maia.Color>} value
 * @return {!proto.maia.UpdateModeColor} returns this
*/
proto.maia.UpdateModeColor.prototype.setColorListList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.maia.Color=} opt_value
 * @param {number=} opt_index
 * @return {!proto.maia.Color}
 */
proto.maia.UpdateModeColor.prototype.addColorList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.maia.Color, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.maia.UpdateModeColor} returns this
 */
proto.maia.UpdateModeColor.prototype.clearColorListList = function() {
  return this.setColorListList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.maia.UpdateModeSpeed.prototype.toObject = function(opt_includeInstance) {
  return proto.maia.UpdateModeSpeed.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.maia.UpdateModeSpeed} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.maia.UpdateModeSpeed.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    speed: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.maia.UpdateModeSpeed}
 */
proto.maia.UpdateModeSpeed.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.maia.UpdateModeSpeed;
  return proto.maia.UpdateModeSpeed.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.maia.UpdateModeSpeed} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.maia.UpdateModeSpeed}
 */
proto.maia.UpdateModeSpeed.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSpeed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.maia.UpdateModeSpeed.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.maia.UpdateModeSpeed.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.maia.UpdateModeSpeed} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.maia.UpdateModeSpeed.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getSpeed();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.maia.UpdateModeSpeed.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.maia.UpdateModeSpeed} returns this
 */
proto.maia.UpdateModeSpeed.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 speed = 2;
 * @return {number}
 */
proto.maia.UpdateModeSpeed.prototype.getSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.maia.UpdateModeSpeed} returns this
 */
proto.maia.UpdateModeSpeed.prototype.setSpeed = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.maia.Mode.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.maia.Mode.prototype.toObject = function(opt_includeInstance) {
  return proto.maia.Mode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.maia.Mode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.maia.Mode.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    colorListList: jspb.Message.toObjectList(msg.getColorListList(),
    proto.maia.Color.toObject, includeInstance),
    speed: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.maia.Mode}
 */
proto.maia.Mode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.maia.Mode;
  return proto.maia.Mode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.maia.Mode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.maia.Mode}
 */
proto.maia.Mode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.maia.Color;
      reader.readMessage(value,proto.maia.Color.deserializeBinaryFromReader);
      msg.addColorList(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSpeed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.maia.Mode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.maia.Mode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.maia.Mode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.maia.Mode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getColorListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.maia.Color.serializeBinaryToWriter
    );
  }
  f = message.getSpeed();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.maia.Mode.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.maia.Mode} returns this
 */
proto.maia.Mode.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.maia.Mode.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.maia.Mode} returns this
 */
proto.maia.Mode.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated Color color_list = 3;
 * @return {!Array<!proto.maia.Color>}
 */
proto.maia.Mode.prototype.getColorListList = function() {
  return /** @type{!Array<!proto.maia.Color>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.maia.Color, 3));
};


/**
 * @param {!Array<!proto.maia.Color>} value
 * @return {!proto.maia.Mode} returns this
*/
proto.maia.Mode.prototype.setColorListList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.maia.Color=} opt_value
 * @param {number=} opt_index
 * @return {!proto.maia.Color}
 */
proto.maia.Mode.prototype.addColorList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.maia.Color, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.maia.Mode} returns this
 */
proto.maia.Mode.prototype.clearColorListList = function() {
  return this.setColorListList([]);
};


/**
 * optional uint32 speed = 4;
 * @return {number}
 */
proto.maia.Mode.prototype.getSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.maia.Mode} returns this
 */
proto.maia.Mode.prototype.setSpeed = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.maia.Readings.prototype.toObject = function(opt_includeInstance) {
  return proto.maia.Readings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.maia.Readings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.maia.Readings.toObject = function(includeInstance, msg) {
  var f, obj = {
    temperature: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    humidity: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    pressure: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.maia.Readings}
 */
proto.maia.Readings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.maia.Readings;
  return proto.maia.Readings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.maia.Readings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.maia.Readings}
 */
proto.maia.Readings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTemperature(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHumidity(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPressure(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.maia.Readings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.maia.Readings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.maia.Readings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.maia.Readings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTemperature();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getHumidity();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getPressure();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional float temperature = 1;
 * @return {number}
 */
proto.maia.Readings.prototype.getTemperature = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.maia.Readings} returns this
 */
proto.maia.Readings.prototype.setTemperature = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float humidity = 2;
 * @return {number}
 */
proto.maia.Readings.prototype.getHumidity = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.maia.Readings} returns this
 */
proto.maia.Readings.prototype.setHumidity = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional uint32 pressure = 3;
 * @return {number}
 */
proto.maia.Readings.prototype.getPressure = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.maia.Readings} returns this
 */
proto.maia.Readings.prototype.setPressure = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.maia.Time.prototype.toObject = function(opt_includeInstance) {
  return proto.maia.Time.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.maia.Time} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.maia.Time.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: msg.getTime_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.maia.Time}
 */
proto.maia.Time.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.maia.Time;
  return proto.maia.Time.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.maia.Time} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.maia.Time}
 */
proto.maia.Time.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.maia.Time.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.maia.Time.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.maia.Time} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.maia.Time.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTime_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes time = 1;
 * @return {!(string|Uint8Array)}
 */
proto.maia.Time.prototype.getTime = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes time = 1;
 * This is a type-conversion wrapper around `getTime()`
 * @return {string}
 */
proto.maia.Time.prototype.getTime_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTime()));
};


/**
 * optional bytes time = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTime()`
 * @return {!Uint8Array}
 */
proto.maia.Time.prototype.getTime_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTime()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.maia.Time} returns this
 */
proto.maia.Time.prototype.setTime = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.maia.Settings.prototype.toObject = function(opt_includeInstance) {
  return proto.maia.Settings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.maia.Settings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.maia.Settings.toObject = function(includeInstance, msg) {
  var f, obj = {
    smartMode: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    autoOffSound: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    autoOffSoundHours: jspb.Message.getFieldWithDefault(msg, 3, 0),
    autoOn: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    autoOnMode: jspb.Message.getFieldWithDefault(msg, 5, 0),
    autoOnTimeLl: jspb.Message.getFieldWithDefault(msg, 6, 0),
    autoOnTimeDimm: jspb.Message.getFieldWithDefault(msg, 7, 0),
    autoOnDimm: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    autoOnDimmTime: jspb.Message.getFieldWithDefault(msg, 9, 0),
    autoOff: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
    autoOffMode: jspb.Message.getFieldWithDefault(msg, 11, 0),
    autoOffTimeLl: jspb.Message.getFieldWithDefault(msg, 12, 0),
    autoOffTimeDimm: jspb.Message.getFieldWithDefault(msg, 13, 0),
    autoOffDimm: jspb.Message.getBooleanFieldWithDefault(msg, 14, false),
    autoOffDimmTime: jspb.Message.getFieldWithDefault(msg, 15, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.maia.Settings}
 */
proto.maia.Settings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.maia.Settings;
  return proto.maia.Settings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.maia.Settings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.maia.Settings}
 */
proto.maia.Settings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSmartMode(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAutoOffSound(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAutoOffSoundHours(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAutoOn(value);
      break;
    case 5:
      var value = /** @type {!proto.maia.auto_mode_t} */ (reader.readEnum());
      msg.setAutoOnMode(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAutoOnTimeLl(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAutoOnTimeDimm(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAutoOnDimm(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAutoOnDimmTime(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAutoOff(value);
      break;
    case 11:
      var value = /** @type {!proto.maia.auto_mode_t} */ (reader.readEnum());
      msg.setAutoOffMode(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAutoOffTimeLl(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAutoOffTimeDimm(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAutoOffDimm(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAutoOffDimmTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.maia.Settings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.maia.Settings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.maia.Settings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.maia.Settings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSmartMode();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getAutoOffSound();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getAutoOffSoundHours();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getAutoOn();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getAutoOnMode();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getAutoOnTimeLl();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getAutoOnTimeDimm();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getAutoOnDimm();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getAutoOnDimmTime();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getAutoOff();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getAutoOffMode();
  if (f !== 0.0) {
    writer.writeEnum(
      11,
      f
    );
  }
  f = message.getAutoOffTimeLl();
  if (f !== 0) {
    writer.writeUint32(
      12,
      f
    );
  }
  f = message.getAutoOffTimeDimm();
  if (f !== 0) {
    writer.writeUint32(
      13,
      f
    );
  }
  f = message.getAutoOffDimm();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
  f = message.getAutoOffDimmTime();
  if (f !== 0) {
    writer.writeUint32(
      15,
      f
    );
  }
};


/**
 * optional bool smart_mode = 1;
 * @return {boolean}
 */
proto.maia.Settings.prototype.getSmartMode = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.maia.Settings} returns this
 */
proto.maia.Settings.prototype.setSmartMode = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool auto_off_sound = 2;
 * @return {boolean}
 */
proto.maia.Settings.prototype.getAutoOffSound = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.maia.Settings} returns this
 */
proto.maia.Settings.prototype.setAutoOffSound = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional uint32 auto_off_sound_hours = 3;
 * @return {number}
 */
proto.maia.Settings.prototype.getAutoOffSoundHours = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.maia.Settings} returns this
 */
proto.maia.Settings.prototype.setAutoOffSoundHours = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool auto_on = 4;
 * @return {boolean}
 */
proto.maia.Settings.prototype.getAutoOn = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.maia.Settings} returns this
 */
proto.maia.Settings.prototype.setAutoOn = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional auto_mode_t auto_on_mode = 5;
 * @return {!proto.maia.auto_mode_t}
 */
proto.maia.Settings.prototype.getAutoOnMode = function() {
  return /** @type {!proto.maia.auto_mode_t} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.maia.auto_mode_t} value
 * @return {!proto.maia.Settings} returns this
 */
proto.maia.Settings.prototype.setAutoOnMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional uint32 auto_on_time_ll = 6;
 * @return {number}
 */
proto.maia.Settings.prototype.getAutoOnTimeLl = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.maia.Settings} returns this
 */
proto.maia.Settings.prototype.setAutoOnTimeLl = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint32 auto_on_time_dimm = 7;
 * @return {number}
 */
proto.maia.Settings.prototype.getAutoOnTimeDimm = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.maia.Settings} returns this
 */
proto.maia.Settings.prototype.setAutoOnTimeDimm = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional bool auto_on_dimm = 8;
 * @return {boolean}
 */
proto.maia.Settings.prototype.getAutoOnDimm = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.maia.Settings} returns this
 */
proto.maia.Settings.prototype.setAutoOnDimm = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional uint32 auto_on_dimm_time = 9;
 * @return {number}
 */
proto.maia.Settings.prototype.getAutoOnDimmTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.maia.Settings} returns this
 */
proto.maia.Settings.prototype.setAutoOnDimmTime = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional bool auto_off = 10;
 * @return {boolean}
 */
proto.maia.Settings.prototype.getAutoOff = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.maia.Settings} returns this
 */
proto.maia.Settings.prototype.setAutoOff = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional auto_mode_t auto_off_mode = 11;
 * @return {!proto.maia.auto_mode_t}
 */
proto.maia.Settings.prototype.getAutoOffMode = function() {
  return /** @type {!proto.maia.auto_mode_t} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {!proto.maia.auto_mode_t} value
 * @return {!proto.maia.Settings} returns this
 */
proto.maia.Settings.prototype.setAutoOffMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 11, value);
};


/**
 * optional uint32 auto_off_time_ll = 12;
 * @return {number}
 */
proto.maia.Settings.prototype.getAutoOffTimeLl = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.maia.Settings} returns this
 */
proto.maia.Settings.prototype.setAutoOffTimeLl = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional uint32 auto_off_time_dimm = 13;
 * @return {number}
 */
proto.maia.Settings.prototype.getAutoOffTimeDimm = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.maia.Settings} returns this
 */
proto.maia.Settings.prototype.setAutoOffTimeDimm = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional bool auto_off_dimm = 14;
 * @return {boolean}
 */
proto.maia.Settings.prototype.getAutoOffDimm = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.maia.Settings} returns this
 */
proto.maia.Settings.prototype.setAutoOffDimm = function(value) {
  return jspb.Message.setProto3BooleanField(this, 14, value);
};


/**
 * optional uint32 auto_off_dimm_time = 15;
 * @return {number}
 */
proto.maia.Settings.prototype.getAutoOffDimmTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.maia.Settings} returns this
 */
proto.maia.Settings.prototype.setAutoOffDimmTime = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * @enum {number}
 */
proto.maia.auto_mode_t = {
  LIGHT_LEVEL: 0,
  TIME: 1
};

goog.object.extend(exports, proto.maia);
