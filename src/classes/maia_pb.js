// source: maia.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.maia.Color', null, global);
goog.exportSymbol('proto.maia.Message', null, global);
goog.exportSymbol('proto.maia.Mode', null, global);
goog.exportSymbol('proto.maia.ModeId', null, global);
goog.exportSymbol('proto.maia.ModeList', null, global);
goog.exportSymbol('proto.maia.ModeUpdate', null, global);
goog.exportSymbol('proto.maia.Readings', null, global);
goog.exportSymbol('proto.maia.Settings', null, global);
goog.exportSymbol('proto.maia.Time', null, global);
goog.exportSymbol('proto.maia.auto_mode_t', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.maia.Message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.maia.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.maia.Message.displayName = 'proto.maia.Message';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.maia.Color = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.maia.Color, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.maia.Color.displayName = 'proto.maia.Color';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.maia.ModeId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.maia.ModeId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.maia.ModeId.displayName = 'proto.maia.ModeId';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.maia.ModeUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.maia.ModeUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.maia.ModeUpdate.displayName = 'proto.maia.ModeUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.maia.Mode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.maia.Mode.repeatedFields_, null);
};
goog.inherits(proto.maia.Mode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.maia.Mode.displayName = 'proto.maia.Mode';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.maia.ModeList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.maia.ModeList.repeatedFields_, null);
};
goog.inherits(proto.maia.ModeList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.maia.ModeList.displayName = 'proto.maia.ModeList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.maia.Readings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.maia.Readings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.maia.Readings.displayName = 'proto.maia.Readings';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.maia.Time = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.maia.Time, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.maia.Time.displayName = 'proto.maia.Time';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.maia.Settings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.maia.Settings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.maia.Settings.displayName = 'proto.maia.Settings';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.maia.Message.prototype.toObject = function(opt_includeInstance) {
  return proto.maia.Message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.maia.Message} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.maia.Message.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    command: jspb.Message.getFieldWithDefault(msg, 2, 0),
    payload: msg.getPayload_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.maia.Message}
 */
proto.maia.Message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.maia.Message;
  return proto.maia.Message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.maia.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.maia.Message}
 */
proto.maia.Message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCommand(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.maia.Message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.maia.Message.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.maia.Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.maia.Message.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCommand();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.maia.Message.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.maia.Message} returns this
 */
proto.maia.Message.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 command = 2;
 * @return {number}
 */
proto.maia.Message.prototype.getCommand = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.maia.Message} returns this
 */
proto.maia.Message.prototype.setCommand = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes payload = 3;
 * @return {!(string|Uint8Array)}
 */
proto.maia.Message.prototype.getPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes payload = 3;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.maia.Message.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * optional bytes payload = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.maia.Message.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.maia.Message} returns this
 */
proto.maia.Message.prototype.setPayload = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.maia.Color.prototype.toObject = function(opt_includeInstance) {
  return proto.maia.Color.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.maia.Color} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.maia.Color.toObject = function(includeInstance, msg) {
  var f, obj = {
    rgb: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.maia.Color}
 */
proto.maia.Color.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.maia.Color;
  return proto.maia.Color.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.maia.Color} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.maia.Color}
 */
proto.maia.Color.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRgb(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.maia.Color.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.maia.Color.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.maia.Color} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.maia.Color.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRgb();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 rgb = 1;
 * @return {number}
 */
proto.maia.Color.prototype.getRgb = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.maia.Color} returns this
 */
proto.maia.Color.prototype.setRgb = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.maia.ModeId.prototype.toObject = function(opt_includeInstance) {
  return proto.maia.ModeId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.maia.ModeId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.maia.ModeId.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.maia.ModeId}
 */
proto.maia.ModeId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.maia.ModeId;
  return proto.maia.ModeId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.maia.ModeId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.maia.ModeId}
 */
proto.maia.ModeId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.maia.ModeId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.maia.ModeId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.maia.ModeId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.maia.ModeId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.maia.ModeId.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.maia.ModeId} returns this
 */
proto.maia.ModeId.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.maia.ModeUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.maia.ModeUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.maia.ModeUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.maia.ModeUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    speed: jspb.Message.getFieldWithDefault(msg, 2, 0),
    color: (f = msg.getColor()) && proto.maia.Color.toObject(includeInstance, f),
    colorIndex: jspb.Message.getFieldWithDefault(msg, 4, 0),
    numColors: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.maia.ModeUpdate}
 */
proto.maia.ModeUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.maia.ModeUpdate;
  return proto.maia.ModeUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.maia.ModeUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.maia.ModeUpdate}
 */
proto.maia.ModeUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSpeed(value);
      break;
    case 3:
      var value = new proto.maia.Color;
      reader.readMessage(value,proto.maia.Color.deserializeBinaryFromReader);
      msg.setColor(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setColorIndex(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumColors(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.maia.ModeUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.maia.ModeUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.maia.ModeUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.maia.ModeUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getSpeed();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getColor();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.maia.Color.serializeBinaryToWriter
    );
  }
  f = message.getColorIndex();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getNumColors();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.maia.ModeUpdate.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.maia.ModeUpdate} returns this
 */
proto.maia.ModeUpdate.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 speed = 2;
 * @return {number}
 */
proto.maia.ModeUpdate.prototype.getSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.maia.ModeUpdate} returns this
 */
proto.maia.ModeUpdate.prototype.setSpeed = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Color color = 3;
 * @return {?proto.maia.Color}
 */
proto.maia.ModeUpdate.prototype.getColor = function() {
  return /** @type{?proto.maia.Color} */ (
    jspb.Message.getWrapperField(this, proto.maia.Color, 3));
};


/**
 * @param {?proto.maia.Color|undefined} value
 * @return {!proto.maia.ModeUpdate} returns this
*/
proto.maia.ModeUpdate.prototype.setColor = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.maia.ModeUpdate} returns this
 */
proto.maia.ModeUpdate.prototype.clearColor = function() {
  return this.setColor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.maia.ModeUpdate.prototype.hasColor = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 color_index = 4;
 * @return {number}
 */
proto.maia.ModeUpdate.prototype.getColorIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.maia.ModeUpdate} returns this
 */
proto.maia.ModeUpdate.prototype.setColorIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 num_colors = 5;
 * @return {number}
 */
proto.maia.ModeUpdate.prototype.getNumColors = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.maia.ModeUpdate} returns this
 */
proto.maia.ModeUpdate.prototype.setNumColors = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.maia.Mode.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.maia.Mode.prototype.toObject = function(opt_includeInstance) {
  return proto.maia.Mode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.maia.Mode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.maia.Mode.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    colorsList: jspb.Message.toObjectList(msg.getColorsList(),
    proto.maia.Color.toObject, includeInstance),
    speed: jspb.Message.getFieldWithDefault(msg, 4, 0),
    editable: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    userMode: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.maia.Mode}
 */
proto.maia.Mode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.maia.Mode;
  return proto.maia.Mode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.maia.Mode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.maia.Mode}
 */
proto.maia.Mode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.maia.Color;
      reader.readMessage(value,proto.maia.Color.deserializeBinaryFromReader);
      msg.addColors(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSpeed(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEditable(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUserMode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.maia.Mode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.maia.Mode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.maia.Mode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.maia.Mode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getColorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.maia.Color.serializeBinaryToWriter
    );
  }
  f = message.getSpeed();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getEditable();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getUserMode();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.maia.Mode.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.maia.Mode} returns this
 */
proto.maia.Mode.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.maia.Mode.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.maia.Mode} returns this
 */
proto.maia.Mode.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated Color colors = 3;
 * @return {!Array<!proto.maia.Color>}
 */
proto.maia.Mode.prototype.getColorsList = function() {
  return /** @type{!Array<!proto.maia.Color>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.maia.Color, 3));
};


/**
 * @param {!Array<!proto.maia.Color>} value
 * @return {!proto.maia.Mode} returns this
*/
proto.maia.Mode.prototype.setColorsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.maia.Color=} opt_value
 * @param {number=} opt_index
 * @return {!proto.maia.Color}
 */
proto.maia.Mode.prototype.addColors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.maia.Color, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.maia.Mode} returns this
 */
proto.maia.Mode.prototype.clearColorsList = function() {
  return this.setColorsList([]);
};


/**
 * optional uint32 speed = 4;
 * @return {number}
 */
proto.maia.Mode.prototype.getSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.maia.Mode} returns this
 */
proto.maia.Mode.prototype.setSpeed = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool editable = 5;
 * @return {boolean}
 */
proto.maia.Mode.prototype.getEditable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.maia.Mode} returns this
 */
proto.maia.Mode.prototype.setEditable = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool user_mode = 6;
 * @return {boolean}
 */
proto.maia.Mode.prototype.getUserMode = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.maia.Mode} returns this
 */
proto.maia.Mode.prototype.setUserMode = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.maia.ModeList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.maia.ModeList.prototype.toObject = function(opt_includeInstance) {
  return proto.maia.ModeList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.maia.ModeList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.maia.ModeList.toObject = function(includeInstance, msg) {
  var f, obj = {
    modesList: jspb.Message.toObjectList(msg.getModesList(),
    proto.maia.Mode.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.maia.ModeList}
 */
proto.maia.ModeList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.maia.ModeList;
  return proto.maia.ModeList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.maia.ModeList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.maia.ModeList}
 */
proto.maia.ModeList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.maia.Mode;
      reader.readMessage(value,proto.maia.Mode.deserializeBinaryFromReader);
      msg.addModes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.maia.ModeList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.maia.ModeList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.maia.ModeList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.maia.ModeList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getModesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.maia.Mode.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Mode modes = 1;
 * @return {!Array<!proto.maia.Mode>}
 */
proto.maia.ModeList.prototype.getModesList = function() {
  return /** @type{!Array<!proto.maia.Mode>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.maia.Mode, 1));
};


/**
 * @param {!Array<!proto.maia.Mode>} value
 * @return {!proto.maia.ModeList} returns this
*/
proto.maia.ModeList.prototype.setModesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.maia.Mode=} opt_value
 * @param {number=} opt_index
 * @return {!proto.maia.Mode}
 */
proto.maia.ModeList.prototype.addModes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.maia.Mode, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.maia.ModeList} returns this
 */
proto.maia.ModeList.prototype.clearModesList = function() {
  return this.setModesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.maia.Readings.prototype.toObject = function(opt_includeInstance) {
  return proto.maia.Readings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.maia.Readings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.maia.Readings.toObject = function(includeInstance, msg) {
  var f, obj = {
    temperature: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    humidity: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    pressure: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.maia.Readings}
 */
proto.maia.Readings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.maia.Readings;
  return proto.maia.Readings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.maia.Readings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.maia.Readings}
 */
proto.maia.Readings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTemperature(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHumidity(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPressure(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.maia.Readings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.maia.Readings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.maia.Readings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.maia.Readings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTemperature();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getHumidity();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getPressure();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional float temperature = 1;
 * @return {number}
 */
proto.maia.Readings.prototype.getTemperature = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.maia.Readings} returns this
 */
proto.maia.Readings.prototype.setTemperature = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float humidity = 2;
 * @return {number}
 */
proto.maia.Readings.prototype.getHumidity = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.maia.Readings} returns this
 */
proto.maia.Readings.prototype.setHumidity = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional uint32 pressure = 3;
 * @return {number}
 */
proto.maia.Readings.prototype.getPressure = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.maia.Readings} returns this
 */
proto.maia.Readings.prototype.setPressure = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.maia.Time.prototype.toObject = function(opt_includeInstance) {
  return proto.maia.Time.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.maia.Time} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.maia.Time.toObject = function(includeInstance, msg) {
  var f, obj = {
    sec: jspb.Message.getFieldWithDefault(msg, 1, 0),
    min: jspb.Message.getFieldWithDefault(msg, 2, 0),
    hour: jspb.Message.getFieldWithDefault(msg, 3, 0),
    wday: jspb.Message.getFieldWithDefault(msg, 4, 0),
    mday: jspb.Message.getFieldWithDefault(msg, 5, 0),
    mon: jspb.Message.getFieldWithDefault(msg, 6, 0),
    year: jspb.Message.getFieldWithDefault(msg, 7, 0),
    isDst: jspb.Message.getBooleanFieldWithDefault(msg, 8, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.maia.Time}
 */
proto.maia.Time.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.maia.Time;
  return proto.maia.Time.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.maia.Time} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.maia.Time}
 */
proto.maia.Time.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSec(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMin(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHour(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWday(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMday(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMon(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setYear(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsDst(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.maia.Time.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.maia.Time.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.maia.Time} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.maia.Time.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSec();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getMin();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getHour();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getWday();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getMday();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getMon();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getYear();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getIsDst();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
};


/**
 * optional uint32 sec = 1;
 * @return {number}
 */
proto.maia.Time.prototype.getSec = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.maia.Time} returns this
 */
proto.maia.Time.prototype.setSec = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 min = 2;
 * @return {number}
 */
proto.maia.Time.prototype.getMin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.maia.Time} returns this
 */
proto.maia.Time.prototype.setMin = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 hour = 3;
 * @return {number}
 */
proto.maia.Time.prototype.getHour = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.maia.Time} returns this
 */
proto.maia.Time.prototype.setHour = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 wday = 4;
 * @return {number}
 */
proto.maia.Time.prototype.getWday = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.maia.Time} returns this
 */
proto.maia.Time.prototype.setWday = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 mday = 5;
 * @return {number}
 */
proto.maia.Time.prototype.getMday = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.maia.Time} returns this
 */
proto.maia.Time.prototype.setMday = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 mon = 6;
 * @return {number}
 */
proto.maia.Time.prototype.getMon = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.maia.Time} returns this
 */
proto.maia.Time.prototype.setMon = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint32 year = 7;
 * @return {number}
 */
proto.maia.Time.prototype.getYear = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.maia.Time} returns this
 */
proto.maia.Time.prototype.setYear = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional bool is_dst = 8;
 * @return {boolean}
 */
proto.maia.Time.prototype.getIsDst = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.maia.Time} returns this
 */
proto.maia.Time.prototype.setIsDst = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.maia.Settings.prototype.toObject = function(opt_includeInstance) {
  return proto.maia.Settings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.maia.Settings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.maia.Settings.toObject = function(includeInstance, msg) {
  var f, obj = {
    smartMode: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    autoOffSound: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    autoOffSoundHours: jspb.Message.getFieldWithDefault(msg, 3, 0),
    autoOn: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    autoOnMode: jspb.Message.getFieldWithDefault(msg, 5, 0),
    autoOnLlTimeLocked: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    autoOnLlAfterTime: jspb.Message.getFieldWithDefault(msg, 7, 0),
    autoOnTime: jspb.Message.getFieldWithDefault(msg, 8, 0),
    autoOnTimeDimm: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    autoOnTimeDimmTime: jspb.Message.getFieldWithDefault(msg, 10, 0),
    autoOff: jspb.Message.getBooleanFieldWithDefault(msg, 11, false),
    autoOffMode: jspb.Message.getFieldWithDefault(msg, 12, 0),
    autoOffLlTimeLocked: jspb.Message.getBooleanFieldWithDefault(msg, 13, false),
    autoOffLlAfterTime: jspb.Message.getFieldWithDefault(msg, 14, 0),
    autoOffTime: jspb.Message.getFieldWithDefault(msg, 15, 0),
    autoOffTimeDimm: jspb.Message.getBooleanFieldWithDefault(msg, 16, false),
    autoOffTimeDimmTime: jspb.Message.getFieldWithDefault(msg, 17, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.maia.Settings}
 */
proto.maia.Settings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.maia.Settings;
  return proto.maia.Settings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.maia.Settings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.maia.Settings}
 */
proto.maia.Settings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSmartMode(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAutoOffSound(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAutoOffSoundHours(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAutoOn(value);
      break;
    case 5:
      var value = /** @type {!proto.maia.auto_mode_t} */ (reader.readEnum());
      msg.setAutoOnMode(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAutoOnLlTimeLocked(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAutoOnLlAfterTime(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAutoOnTime(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAutoOnTimeDimm(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAutoOnTimeDimmTime(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAutoOff(value);
      break;
    case 12:
      var value = /** @type {!proto.maia.auto_mode_t} */ (reader.readEnum());
      msg.setAutoOffMode(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAutoOffLlTimeLocked(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAutoOffLlAfterTime(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAutoOffTime(value);
      break;
    case 16:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAutoOffTimeDimm(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAutoOffTimeDimmTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.maia.Settings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.maia.Settings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.maia.Settings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.maia.Settings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSmartMode();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getAutoOffSound();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getAutoOffSoundHours();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getAutoOn();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getAutoOnMode();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getAutoOnLlTimeLocked();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getAutoOnLlAfterTime();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getAutoOnTime();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getAutoOnTimeDimm();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getAutoOnTimeDimmTime();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = message.getAutoOff();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getAutoOffMode();
  if (f !== 0.0) {
    writer.writeEnum(
      12,
      f
    );
  }
  f = message.getAutoOffLlTimeLocked();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = message.getAutoOffLlAfterTime();
  if (f !== 0) {
    writer.writeUint32(
      14,
      f
    );
  }
  f = message.getAutoOffTime();
  if (f !== 0) {
    writer.writeUint32(
      15,
      f
    );
  }
  f = message.getAutoOffTimeDimm();
  if (f) {
    writer.writeBool(
      16,
      f
    );
  }
  f = message.getAutoOffTimeDimmTime();
  if (f !== 0) {
    writer.writeUint32(
      17,
      f
    );
  }
};


/**
 * optional bool smart_mode = 1;
 * @return {boolean}
 */
proto.maia.Settings.prototype.getSmartMode = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.maia.Settings} returns this
 */
proto.maia.Settings.prototype.setSmartMode = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool auto_off_sound = 2;
 * @return {boolean}
 */
proto.maia.Settings.prototype.getAutoOffSound = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.maia.Settings} returns this
 */
proto.maia.Settings.prototype.setAutoOffSound = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional uint32 auto_off_sound_hours = 3;
 * @return {number}
 */
proto.maia.Settings.prototype.getAutoOffSoundHours = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.maia.Settings} returns this
 */
proto.maia.Settings.prototype.setAutoOffSoundHours = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool auto_on = 4;
 * @return {boolean}
 */
proto.maia.Settings.prototype.getAutoOn = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.maia.Settings} returns this
 */
proto.maia.Settings.prototype.setAutoOn = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional auto_mode_t auto_on_mode = 5;
 * @return {!proto.maia.auto_mode_t}
 */
proto.maia.Settings.prototype.getAutoOnMode = function() {
  return /** @type {!proto.maia.auto_mode_t} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.maia.auto_mode_t} value
 * @return {!proto.maia.Settings} returns this
 */
proto.maia.Settings.prototype.setAutoOnMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional bool auto_on_ll_time_locked = 6;
 * @return {boolean}
 */
proto.maia.Settings.prototype.getAutoOnLlTimeLocked = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.maia.Settings} returns this
 */
proto.maia.Settings.prototype.setAutoOnLlTimeLocked = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional uint32 auto_on_ll_after_time = 7;
 * @return {number}
 */
proto.maia.Settings.prototype.getAutoOnLlAfterTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.maia.Settings} returns this
 */
proto.maia.Settings.prototype.setAutoOnLlAfterTime = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint32 auto_on_time = 8;
 * @return {number}
 */
proto.maia.Settings.prototype.getAutoOnTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.maia.Settings} returns this
 */
proto.maia.Settings.prototype.setAutoOnTime = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional bool auto_on_time_dimm = 9;
 * @return {boolean}
 */
proto.maia.Settings.prototype.getAutoOnTimeDimm = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.maia.Settings} returns this
 */
proto.maia.Settings.prototype.setAutoOnTimeDimm = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional uint32 auto_on_time_dimm_time = 10;
 * @return {number}
 */
proto.maia.Settings.prototype.getAutoOnTimeDimmTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.maia.Settings} returns this
 */
proto.maia.Settings.prototype.setAutoOnTimeDimmTime = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional bool auto_off = 11;
 * @return {boolean}
 */
proto.maia.Settings.prototype.getAutoOff = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.maia.Settings} returns this
 */
proto.maia.Settings.prototype.setAutoOff = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional auto_mode_t auto_off_mode = 12;
 * @return {!proto.maia.auto_mode_t}
 */
proto.maia.Settings.prototype.getAutoOffMode = function() {
  return /** @type {!proto.maia.auto_mode_t} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {!proto.maia.auto_mode_t} value
 * @return {!proto.maia.Settings} returns this
 */
proto.maia.Settings.prototype.setAutoOffMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 12, value);
};


/**
 * optional bool auto_off_ll_time_locked = 13;
 * @return {boolean}
 */
proto.maia.Settings.prototype.getAutoOffLlTimeLocked = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));
};


/**
 * @param {boolean} value
 * @return {!proto.maia.Settings} returns this
 */
proto.maia.Settings.prototype.setAutoOffLlTimeLocked = function(value) {
  return jspb.Message.setProto3BooleanField(this, 13, value);
};


/**
 * optional uint32 auto_off_ll_after_time = 14;
 * @return {number}
 */
proto.maia.Settings.prototype.getAutoOffLlAfterTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.maia.Settings} returns this
 */
proto.maia.Settings.prototype.setAutoOffLlAfterTime = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional uint32 auto_off_time = 15;
 * @return {number}
 */
proto.maia.Settings.prototype.getAutoOffTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.maia.Settings} returns this
 */
proto.maia.Settings.prototype.setAutoOffTime = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional bool auto_off_time_dimm = 16;
 * @return {boolean}
 */
proto.maia.Settings.prototype.getAutoOffTimeDimm = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 16, false));
};


/**
 * @param {boolean} value
 * @return {!proto.maia.Settings} returns this
 */
proto.maia.Settings.prototype.setAutoOffTimeDimm = function(value) {
  return jspb.Message.setProto3BooleanField(this, 16, value);
};


/**
 * optional uint32 auto_off_time_dimm_time = 17;
 * @return {number}
 */
proto.maia.Settings.prototype.getAutoOffTimeDimmTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.maia.Settings} returns this
 */
proto.maia.Settings.prototype.setAutoOffTimeDimmTime = function(value) {
  return jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * @enum {number}
 */
proto.maia.auto_mode_t = {
  LIGHT_LEVEL: 0,
  TIME: 1
};

goog.object.extend(exports, proto.maia);
